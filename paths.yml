"/customer":
  get:
    operationId: "customer-index"
    tags: ["customer"]
    description: Returns all customers
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customers"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  post:
    operationId: "customer-store"
    tags: ["customer"]
    description: Create a new customer
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customer"
      required: true
    responses:
      "200":
        description: A customer was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAuthenticate"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/customer/{id}":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  get:
    operationId: "customer-show"
    tags: ["customer"]
    description: Get a single customer
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: Customer not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  put:
    operationId: "customer-update"
    tags: ["customer"]
    description: Update a customer
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customer"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: Customer not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  delete:
    operationId: "customer-delete"
    tags: ["customer"]
    description: Delete a customer
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              type: object
              properties: {}
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: Customer not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/customer/session":
  post:
    operationId: "customer-session"
    tags: ["customer"]
    description: Authenticate a customer
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerCredentials"
      required: true
    responses:
      "200":
        description: A customer was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAuthenticate"
      "401":
        description: Unauthorized (invalid credentials)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: Customer not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/customer/renew":
  get:
    operationId: "customer-renew"
    tags: ["customer"]
    description: Re-authenticate a customer
    security:
      - authToken: []
    responses:
      "200":
        description: A customer was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAuthenticate"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: Customer not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/customer/session/third-party":
  post:
    operationId: "customer-session-third-party"
    tags: ["customer"]
    description: Authenticate a customer signed with third-party
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerThirdPartyCredential"
      required: true
    responses:
      "200":
        description: A customer was temporary authenticated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAuthenticate"
      "401":
        description: Unauthorized (invalid token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/customer/third-party":
  put:
    operationId: "customer-third-party-complete-register"
    tags: ["customer"]
    description: Complete register of a customer signed with third-party
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customer"
      required: true
    responses:
      "200":
        description: Customer was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAuthenticate"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/customer/address":
  get:
    operationId: "customer-address-index"
    tags: ["customer-address"]
    description: Returns all addresses of single customer
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddresses"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  post:
    operationId: "customer-address-store"
    tags: ["customer-address"]
    description: Create a new address of single customer
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerAddress"
      required: true
    responses:
      "200":
        description: A customer-address was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddressFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/customer/address/{id}":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  get:
    operationId: "customer-address-show"
    tags: ["customer-address"]
    description: Get a single address of single customer
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddressFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-address not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  put:
    operationId: "customer-address-update"
    tags: ["customer-address"]
    description: Update an address of single customer
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerAddress"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddressFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-address not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  delete:
    operationId: "customer-address-delete"
    tags: ["customer-address"]
    description: Delete an address of single customer
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              type: object
              properties: {}
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-address not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/customer/address/{id}/detail":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  get:
    operationId: "customer-address-detail-show"
    tags: ["customer-address-detail"]
    description: Get a single address-detail of single customer
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddressDetailFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-address-detail not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  post:
    operationId: "customer-address-detail-store"
    tags: ["customer-address-detail"]
    description: Create a new address-detail of single customer
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerAddressDetail"
      required: true
    responses:
      "200":
        description: A customer-address-detail was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddressDetailFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  put:
    operationId: "customer-address-detail-update"
    tags: ["customer-address-detail"]
    description: Update an address-detail of single customer
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerAddressDetail"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddressDetailFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-address-detail not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  delete:
    operationId: "customer-address-detail-delete"
    tags: ["customer-address-detail"]
    description: Delete an address-detail of single customer
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              type: object
              properties: {}
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-address-detail not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/customer/favorite":
  get:
    operationId: "customer-favorite-index"
    tags: ["customer-favorite"]
    description: Returns all customer favorite products
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/products"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  post:
    operationId: "customer-favorite-store"
    tags: ["customer-favorite"]
    description: Add new customer favorite product
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerFavorite"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
      "400":
        description: product has already been added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: product not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/customer/favorite/{id}":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: number
  delete:
    operationId: "customer-favorite-delete"
    tags: ["customer-favorite"]
    description: Delete a customer favorite product
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: product not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/customer/card":
  get:
    operationId: "customer-card-index"
    tags: ["customer-card"]
    description: Returns all customer cards
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerCard"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  post:
    operationId: "customer-card-store"
    tags: ["customer-card"]
    description: Create new customer card
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerCardCreate"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerCard"
      "400":
        description: customer-card already exists
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: billing address not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/customer/card/{id}":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  delete:
    operationId: "customer-card-delete"
    tags: ["customer-card"]
    description: Delete a customer-card
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              type: object
              properties: {}
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-card not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/coupon":
  get:
    operationId: "coupon-index"
    tags: ["coupon"]
    description: Returns all coupons
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/coupons"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  post:
    operationId: "coupon-store"
    tags: ["coupon"]
    description: Create a new coupon
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/coupon"
      required: true
    responses:
      "200":
        description: A coupon was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/couponFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/coupon/{id}":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  get:
    operationId: "coupon-show"
    tags: ["coupon"]
    description: Get a coupon
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/couponFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: coupon not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "429":
        description: coupon exceeded usage limit
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  put:
    operationId: "coupon-update"
    tags: ["coupon"]
    description: Update a coupon
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/coupon"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/couponFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: coupon not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  delete:
    operationId: "coupon"
    tags: ["coupon"]
    description: Delete a coupon
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              type: object
              properties: {}
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: coupon not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/coupon/name/{name}":
  parameters:
    - name: name # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  get:
    operationId: "coupon-show-by-name"
    tags: ["coupon"]
    description: Get a coupon by name
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/couponFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: coupon not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "429":
        description: coupon exceeded usage limit
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/product":
  parameters:
    - in: query
      name: page
      schema:
        type: number
      required: false
      description: page of products (default=1)
    - in: query
      name: limit
      schema:
        type: number
      required: false
      description: limit of products on page (default=50)
    - in: query
      name: search
      schema:
        type: number
      required: false
      description: filter products by text segment
    - in: query
      name: category
      schema:
        type: number
      required: false
      description: filter products by category
  get:
    operationId: "product-index"
    tags: ["product"]
    description: Returns all products
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/productsFull"
      "404":
        description: Customer not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/product/{id}":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  get:
    operationId: "product-show"
    tags: ["product"]
    description: Get a product
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: product not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/product-group":
  get:
    operationId: "product-group-index"
    tags: ["product-group"]
    description: Returns all product-groups
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/productGroupsFull"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/product-group/brand":
  get:
    operationId: "product-group-brand"
    tags: ["product-group"]
    description: Returns all product-group brands
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/productGroups"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/product-group/category":
  get:
    operationId: "product-group-category"
    tags: ["product-group"]
    description: Returns all product-group categories
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/productGroups"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/product-group/sub-category":
  get:
    operationId: "product-group-sub-category"
    tags: ["product-group"]
    description: Returns all product-group sub categories
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/productGroups"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/employee":
  get:
    operationId: "employee-index"
    tags: ["employee"]
    description: Returns all employees
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employees"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  post:
    operationId: "employee-store"
    tags: ["employee"]
    description: Create a new employee
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/employee"
      required: true
    responses:
      "200":
        description: A employee was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/employee/agent":
  get:
    operationId: "employee-agent-index"
    tags: ["employee"]
    description: Returns all agent employees
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeesSimplified"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/employee/{id}":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  get:
    operationId: "employee-show"
    tags: ["employee"]
    description: Get a single employee
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: employee not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  put:
    operationId: "employee-update"
    tags: ["employee"]
    description: Update a employee
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/employeeUpdate"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: employee not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  delete:
    operationId: "employee-delete"
    tags: ["employee"]
    description: Delete a employee
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              type: object
              properties: {}
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: employee not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/employee/session":
  post:
    operationId: "employee-session"
    tags: ["employee"]
    description: Authenticate an employee
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/employeeCredentials"
      required: true
    responses:
      "200":
        description: An employee was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeAuthenticate"
      "401":
        description: Unauthorized (invalid credentials)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: employee not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/employee/renew":
  get:
    operationId: "employee-renew"
    tags: ["employee"]
    description: Re-authenticate an employee
    security:
      - authToken: []
    responses:
      "200":
        description: An employee re-authenticated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeAuthenticate"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: employee not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/order":
  parameters:
    - in: query
      name: page
      schema:
        type: number
      required: false
      description: page of products (default=1)
    - in: query
      name: limit
      schema:
        type: number
      required: false
      description: limit of products on page (default=30)
    - in: query
      name: status
      schema:
        type: string
      required: false
      description: filter by order status [waiting, approved, invoice_issuance, in_separation, finished or canceled]
  get:
    operationId: "order-index"
    tags: ["order"]
    description: Returns all orders
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ordersFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/order/customer":
  parameters:
    - in: query
      name: status
      schema:
        type: string
      required: false
      description: filter by order status [waiting, approved, invoice_issuance, in_separation, finished or canceled]
  get:
    operationId: "order-customer-index"
    tags: ["order"]
    description: Returns all customer orders
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ordersFullCustomer"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/order/":
  parameters:
    - in: query
      name: coupon
      schema:
        type: string
      required: false
      description: coupon id to apply discount
  post:
    operationId: "order-store"
    tags: ["order"]
    description: Create a new order
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/orderStore"
      required: true
    responses:
      "200":
        description: An order was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orderFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/order/{id}":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  get:
    operationId: "order-show"
    tags: ["order"]
    description: Get a single order
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orderFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: order not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/order/{id}/status":
  parameters:
    - name: id # Must be same as the value in the {}.
      # Location of the parameter.
      # Can be `path`, `cookie`, `query` or `header`
      in: path
      description: ID of the post
      required: true
      schema:
        type: string
        format: uuid
  put:
    operationId: "order-status-update"
    tags: ["order"]
    description: Update an order status
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/orderStatusUpdate"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orderFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: order not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/order/{id}/invoice":
  parameters:
    - name: id
      in: path
      description: Id of the order
      required: true
      schema:
        type: string
        format: uuid
  post:
    operationId: "order-invoice-store"
    tags: ["order-invoice"]
    description: Store an order invoice
    security:
      - authToken: []
    requestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
      required: true
    responses:
      "200":
        description: An order-invoice was stored
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orderFull"
      "400":
        description: order has already an invoice added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: order not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  delete:
    operationId: "order-invoice-delete"
    tags: ["order-invoice"]
    description: Delete an order invoice
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              type: object
              properties: {}
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "400":
        description: order without invoice
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: order not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/order/{id}/bill":
  parameters:
    - name: id
      in: path
      description: Id of the order
      required: true
      schema:
        type: string
        format: uuid
  post:
    operationId: "order-bill-store"
    tags: ["order-bill"]
    description: Store order bills
    security:
      - authToken: []
    requestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
      required: true
    responses:
      "200":
        description: An order bills was stored
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orderFull"
      "400":
        description: order does not have payment.method=installment_bill / number of installments are required to add bills / number of installments incompatible with number of attached files
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: order not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  delete:
    operationId: "order-bill-delete"
    tags: ["order-bill"]
    description: Delete order bills
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              type: object
              properties: {}
      "400":
        description: order does not have payment.method=installment_bill / order without bills
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: order not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/customer/payment":
  get:
    operationId: "customer-payment-index"
    tags: ["customer-payment"]
    description: Returns all customer payments
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerPaymentsFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/customer/cart/{customerId}":
  parameters:
    - name: customerId
      in: path
      description: id of customer
      required: false
      schema:
        type: string
        format: uuid
  get:
    operationId: "customer-cart-show"
    tags: ["customer-cart"]
    description: Get a cart of single customer
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerCartFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-cart not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
"/customer/cart":
  post:
    operationId: "customer-cart-store"
    tags: ["customer-cart"]
    description: Create a new cart of single customer
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerCart"
      required: true
    responses:
      "200":
        description: A customer-cart was created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerCartFull"
      "400":
        description: customer-cart already exists
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
  put:
    operationId: "customer-cart-update"
    tags: ["customer-cart"]
    description: Update a cart of single customer
    security:
      - authToken: []
    requestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/customerCart"
      required: true
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerCartFull"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "404":
        description: customer-cart not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}

"/payment/fee/credit-card/{amount}":
  parameters:
    - name: amount
      in: path
      description: amount of order (in cents)
      required: true
      schema:
        type: number
  get:
    operationId: "payment-fee-index"
    tags: ["payment-fee"]
    description: Get a list of installment options
    security:
      - authToken: []
    responses:
      "200":
        description: All went well
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/creditCardPaymentsFee"
      "400":
        description: amount invalid
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "401":
        description: Unauthorized (invalid or expired token)
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/applicationError"
      "500":
        description: Internal server error
        content:
          application/json:
            schema:
              type: object
              properties: {}
