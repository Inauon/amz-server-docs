openapi: 3.0.3

info:
  title: AMZ API
  description: API for integrations with amz-server.
  contact:
    url: git@github.com:Inauon/amz-server.git
  version: 0.1.0

servers:
  - url: https://us-central1-amz-server-cb50d.cloudfunctions.net/app
    description: Sandbox

tags:
  - name: customer # <--- unique tag name
    description: Operations to manage the customers
  - name: customer-address
    description: Operations to manage the customers addresses
  - name: customer-address-detail
    description: Operations to manage the detail of customers addresses
  - name: coupon
    description: Operations to manage the coupons

  - name: employee
    description: Operations to manage the employees

paths:
  "/customer":
    get:
      operationId: "customer-index"
      tags: ["customer"]
      description: Returns all customers
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    post:
      operationId: "customer-store"
      tags: ["customer"]
      description: Create a new customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
        required: true
      responses:
        "200":
          description: A customer was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerFull"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/customer/{id}":
    parameters:
      - name: id # Must be same as the value in the {}.
        # Location of the parameter.
        # Can be `path`, `cookie`, `query` or `header`
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: "customer-show"
      tags: ["customer"]
      description: Get a single customer
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    put:
      operationId: "customer-update"
      tags: ["customer"]
      description: Update a customer
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
        required: true
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    delete:
      operationId: "customer-delete"
      tags: ["customer"]
      description: Delete a customer
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/customer/session":
    post:
      operationId: "customer-session"
      tags: ["customer"]
      description: Authenticate a customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerCredentials"
        required: true
      responses:
        "200":
          description: A customer was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerAuthenticate"
        "401":
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/customer/renew":
    get:
      operationId: "customer-renew"
      tags: ["customer"]
      description: Re-authenticate a customer
      security:
        - authToken: []
      responses:
        "200":
          description: A customer was created
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}

  "/customer-address":
    get:
      operationId: "customer-address-index"
      tags: ["customer-address"]
      description: Returns all addresses of single customer
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerAddressFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    post:
      operationId: "customer-address-store"
      tags: ["customer-address"]
      description: Create a new address of single customer
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddress"
        required: true
      responses:
        "200":
          description: A customer-address was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerAddressFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/customer/address/{id}":
    parameters:
      - name: id # Must be same as the value in the {}.
        # Location of the parameter.
        # Can be `path`, `cookie`, `query` or `header`
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: "customer-address-show"
      tags: ["customer-address"]
      description: Get a single address of single customer
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerAddressFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: customer-address not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    put:
      operationId: "customer-address-update"
      tags: ["customer-address"]
      description: Update an address of single customer
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddress"
        required: true
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerAddressFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: customer-address not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    delete:
      operationId: "customer-address-delete"
      tags: ["customer-address"]
      description: Delete an address of single customer
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: customer-address not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}

  "/customer-address-detail":
    post:
      operationId: "customer-address-detail-store"
      tags: ["customer-address-detail"]
      description: Create a new address-detail of single customer
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddressDetail"
        required: true
      responses:
        "200":
          description: A customer-address-detail was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerAddressDetailFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/customer/address/{id}/detail":
    parameters:
      - name: id # Must be same as the value in the {}.
        # Location of the parameter.
        # Can be `path`, `cookie`, `query` or `header`
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: "customer-address-detail-show"
      tags: ["customer-address-detail"]
      description: Get a single address-detail of single customer
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerAddressDetailFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: customer-address-detail not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    put:
      operationId: "customer-address-detail-update"
      tags: ["customer-address-detail"]
      description: Update an address-detail of single customer
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerAddressDetail"
        required: true
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerAddressDetailFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: customer-address-detail not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    delete:
      operationId: "customer-address-detail-delete"
      tags: ["customer-address-detail"]
      description: Delete an address-detail of single customer
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: customer-address-detail not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}

  "/coupon":
    get:
      operationId: "coupon-index"
      tags: ["coupon"]
      description: Returns all coupons
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/couponFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    post:
      operationId: "coupon-store"
      tags: ["coupon"]
      description: Create a new coupon
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/coupon"
        required: true
      responses:
        "200":
          description: A coupon was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/couponFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/coupon/{id}":
    parameters:
      - name: id # Must be same as the value in the {}.
        # Location of the parameter.
        # Can be `path`, `cookie`, `query` or `header`
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: "coupon-show"
      tags: ["coupon"]
      description: Get a coupon
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/couponFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: coupon not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    put:
      operationId: "coupon-update"
      tags: ["coupon"]
      description: Update a coupon
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/coupon"
        required: true
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/couponFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: coupon not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    delete:
      operationId: "coupon"
      tags: ["coupon"]
      description: Delete a coupon
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: coupon not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/coupon/name/{name}":
    parameters:
      - name: name # Must be same as the value in the {}.
        # Location of the parameter.
        # Can be `path`, `cookie`, `query` or `header`
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: "coupon-show-by-name"
      tags: ["coupon"]
      description: Get a coupon by name
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/couponFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: coupon not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/coupon/usage/{id}":
    parameters:
      - name: id # Must be same as the value in the {}.
        # Location of the parameter.
        # Can be `path`, `cookie`, `query` or `header`
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
          format: uuid
    put:
      operationId: "coupon-usage"
      tags: ["coupon"]
      description: Update coupon usage by id
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/couponFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: coupon not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "423":
          description: coupon exceeded usage limit
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}

  "/employee":
    get:
      operationId: "employee-index"
      tags: ["employee"]
      description: Returns all employees
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    post:
      operationId: "employee-store"
      tags: ["employee"]
      description: Create a new employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employee"
        required: true
      responses:
        "200":
          description: A employee was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeFull"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/employee/{id}":
    parameters:
      - name: id # Must be same as the value in the {}.
        # Location of the parameter.
        # Can be `path`, `cookie`, `query` or `header`
        in: path
        description: ID of the post
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: "employee-show"
      tags: ["employee"]
      description: Get a single employee
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    put:
      operationId: "employee-update"
      tags: ["employee"]
      description: Update a employee
      security:
        - authToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeUpdate"
        required: true
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeFull"
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
    delete:
      operationId: "employee-delete"
      tags: ["employee"]
      description: Delete a employee
      security:
        - authToken: []
      responses:
        "200":
          description: All went well
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/employee/session":
    post:
      operationId: "employee-session"
      tags: ["employee"]
      description: Authenticate a customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeCredentials"
        required: true
      responses:
        "200":
          description: A employee was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employeeAuthenticate"
        "401":
          description: Unauthorized (invalid credentials)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}
  "/employee/renew":
    get:
      operationId: "employee-renew"
      tags: ["employee"]
      description: Re-authenticate a employee
      security:
        - authToken: []
      responses:
        "200":
          description: A employee was created
          content:
            application/json:
              schema:
                type: object
                properties: {}
        "401":
          description: Unauthorized (invalid or expired token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "404":
          description: employee not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/applicationError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties: {}

components:
  securitySchemes:
    authToken:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    applicationError:
      type: object
      properties:
        error:
          type: string
          description: describe error
    customer:
      type: object
      properties:
        email:
          type: string
          description: Email of the customer
        password:
          type: string
          description: Password of the customer
        name:
          type: string
          description: Name of the customer
        surname:
          type: string
          description: Surname of the customer
        birthday:
          type: string
          description: Birthday of the customer
        area_code:
          type: number
          description: Area code of the customer
        number:
          type: number
          description: Number of the customer
        full_number:
          type: number
          description: Full of the customer (area_code+number)
    customerFull:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the customer
        email:
          type: string
          description: Email of the customer
        password:
          type: string
          description: Password of the customer
        name:
          type: string
          description: Name of the customer
        surname:
          type: string
          description: Surname of the customer
        birthday:
          type: string
          description: Birthday of the customer
        area_code:
          type: number
          description: Area code of the customer
        number:
          type: number
          description: Number of the customer
        full_number:
          type: number
          description: Full of the customer (area code + number)
    customerCredentials:
      type: object
      properties:
        email:
          type: string
          description: Email of the customer (its possible pass full_number instead of)
        password:
          type: string
          description: Password of the customer
    customerAuthenticate:
      type: object
      properties:
        customer:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: ID of the customer
            email:
              type: string
              description: Email of the customer
            password:
              type: string
              description: Password of the customer
            name:
              type: string
              description: Name of the customer
            surname:
              type: string
              description: Surname of the customer
            birthday:
              type: string
              description: Birthday of the customer
            area_code:
              type: number
              description: Area code of the customer
            number:
              type: number
              description: Telephone number of the customer
            full_number:
              type: number
              description: Full of the customer (area code + number)
        session:
          type: string
          description: Session token
    customerAddress:
      type: object
      properties:
        street:
          type: string
          description: Street name
        number:
          type: number
          description: Location number
        zip_code:
          type: number
          description: A postal code
        neighborhood:
          type: string
          description: Neighborhood name
        city:
          type: string
          description: City name
        state:
          type: number
          description: State name
        country:
          type: number
          description: Country name
        complement:
          type: number
          description: Complement of address
    customerAddressFull:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the address
        street:
          type: string
          description: Street name
        number:
          type: number
          description: Location number
        zip_code:
          type: number
          description: A postal code
        neighborhood:
          type: string
          description: Neighborhood name
        city:
          type: string
          description: City name
        state:
          type: string
          description: State name
        country:
          type: string
          description: Country name
        complement:
          type: string
          description: Complement of address
    customerAddressDetail:
      type: object
      properties:
        document_type:
          type: string
          description: Document type can be individual or company
        document_number:
          type: number
          description: Document number according by document type
        company_name:
          type: number
          description: Company name for companies (null as default)
        tax_free:
          type: string
          description: Tax free for companies (false as default)
        state_registration:
          type: string
          description: State registration for companies (null as default)
    customerAddressDetailFull:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the address-detail
        document_type:
          type: string
          description: Document type can be individual or company
        document_number:
          type: number
          description: Document number according by document type
        company_name:
          type: number
          description: Company name for companies (null as default)
        tax_free:
          type: string
          description: Tax free for companies (false as default)
        state_registration:
          type: string
          description: State registration for companies (null as default)
    coupon:
      type: object
      properties:
        name:
          type: string
          description: Name of coupon (must be unique)
        validity:
          type: string
          description: Validity of coupon (american date format)
        usable_quantity:
          type: number
          description: Usable quantity of coupon
        quantity_used:
          type: number
          description: Quantity already used of coupon (zero as default)
        percentage:
          type: number
          description: Percentage of coupon applyable (value in decimal format)
    couponFull:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of coupon
        code:
          type: string
          description: Code of coupon generated automatically
        name:
          type: string
          description: Name of coupon (must be unique)
        validity:
          type: string
          description: Validity of coupon (american date format)
        usable_quantity:
          type: number
          description: Usable quantity of coupon
        quantity_used:
          type: number
          description: Quantity already used of coupon (zero as default)
        percentage:
          type: number
          description: Percentage of coupon applyable (value in decimal)

    employee:
      type: object
      properties:
        identifier:
          type: string
          description: Email of the employee
        password:
          type: string
          description: Password of the employee
        accout_type:
          type: string
          description: Account type of the employee (can be admin or agent)
        display_name:
          type: string
          description: Name and surname of employee
    employeeFull:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the employee
        code:
          type: string
          description: Code of the employee
        identifier:
          type: string
          description: Email of the employee
        password:
          type: string
          description: Password of the employee
        accout_type:
          type: string
          description: Account type of the employee (can be admin or agent)
        display_name:
          type: string
          description: Name and surname of employee
    employeeUpdate:
      type: object
      properties:
        code:
          type: string
          description: Code of the employee
        identifier:
          type: string
          description: Email of the employee
        password:
          type: string
          description: Password of the employee (necessary only when change password passing new_password field)
        new_passsword:
          type: string
          description: New password of the employee (must be pass actual password)
        accout_type:
          type: string
          description: Account type of the employee (can be admin or agent)
        display_name:
          type: string
          description: Name and surname of employee
    employeeCredentials:
      type: object
      properties:
        identifier:
          type: string
          description: Identifier of the employee (can be email or number)
        password:
          type: string
          description: Password of the employee
    employeeAuthenticate:
      type: object
      properties:
        customer:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: ID of the employee
            code:
              type: string
              description: Code of the employee
            identifier:
              type: string
              description: Email of the employee
            password:
              type: string
              description: Password of the employee
            accout_type:
              type: string
              description: Account type of the employee (can be admin or agent)
        display_name:
          type: string
          description: Name and surname of employee
        session:
          type: string
          description: Session token
